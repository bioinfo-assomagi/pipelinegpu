import os
import subprocess
from Pipes.Pipe import Pipe
import config

class VcfQualityFilter(Pipe):
    """
    Pipeline step to apply GATK4 hardâ€‘threshold filters directly on split SNP/INDEL VCFs
    generated by VariantCallPipe (sample.vcf_hap_snp and sample.vcf_hap_indel).
    """

    def process(self, **kwargs):
        principal_directory = kwargs['principal_directory']
        sample = kwargs['sample']

        temp_dir = os.path.join(principal_directory, 'temp')
        os.makedirs(temp_dir, exist_ok=True)
        ref_fa = os.path.join(config.REF, config.REF_GENOME_NAME)

        # Input VCFs from HaplotypeCaller split
        snp_vcf = getattr(sample, 'vcf_hap_snp', None)
        indel_vcf = getattr(sample, 'vcf_hap_indel', None)
        if not snp_vcf or not os.path.exists(snp_vcf):
            raise FileNotFoundError(f"SNP VCF not found for sample {sample.name}: {snp_vcf}")
        if not indel_vcf or not os.path.exists(indel_vcf):
            raise FileNotFoundError(f"INDEL VCF not found for sample {sample.name}: {indel_vcf}")

        # Filtration for SNP
        snp_filtered = os.path.join(temp_dir, f"{sample.name}_hap_snp.filtered.vcf")
        cmd_filt_snp = [
            config.GATK, 'VariantFiltration',
            '-R', ref_fa,
            '-V', snp_vcf,
            '-O', snp_filtered,
            '--filter-name', 'LowQD', '--filter-expression', 'QD < 2.0',
            '--filter-name', 'LowQUAL', '--filter-expression', 'QUAL < 30.0',
            '--filter-name', 'HighSOR', '--filter-expression', 'SOR > 3.0',
            '--filter-name', 'HighFS', '--filter-expression', 'FS > 60.0',
            '--filter-name', 'LowMQ', '--filter-expression', 'MQ < 40.0',
            '--filter-name', 'LowMQRankSum', '--filter-expression', 'MQRankSum < -12.5',
            '--filter-name', 'LowReadPosRankSum', '--filter-expression', 'ReadPosRankSum < -8.0'
        ]
        subprocess.run(cmd_filt_snp, check=True)
        sample.vcf_hap_snp_filtered = snp_filtered

        # Filtration for INDEL
        indel_filtered = os.path.join(temp_dir, f"{sample.name}_hap_indel.filtered.vcf")
        cmd_filt_indel = [
            config.GATK, 'VariantFiltration',
            '-R', ref_fa,
            '-V', indel_vcf,
            '-O', indel_filtered,
            '--filter-name', 'LowQD', '--filter-expression', 'QD < 2.0',
            '--filter-name', 'LowQUAL', '--filter-expression', 'QUAL < 30.0',
            '--filter-name', 'HighFS', '--filter-expression', 'FS > 200.0',
            '--filter-name', 'LowReadPosRankSum', '--filter-expression', 'ReadPosRankSum < -20.0'
        ]
        subprocess.run(cmd_filt_indel, check=True)
        sample.vcf_hap_indel_filtered = indel_filtered

        # Merge filtered SNP and INDEL into single VCF
        vcf_dir = os.path.join(principal_directory, 'vcf')
        os.makedirs(vcf_dir, exist_ok=True)
        merged_vcf = os.path.join(vcf_dir, f"{sample.name}_qualityfilter_gatk.vcf")
        cmd_merge = [
            config.GATK, 'MergeVcfs',
            '-I', snp_filtered,
            '-I', indel_filtered,
            '-O', merged_vcf
        ]
        subprocess.run(cmd_merge, check=True)
        sample.vcf_quality_filtered = merged_vcf

        kwargs['sample'] = sample
        return kwargs
